name: CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - feature/*
      - hotfix/*

env:
  DOCKER_HUB_REPOSITORY: chernoboger/ci-cd
  VERSION_FILE: version
  CHANGELOG_FILE: changelog.md

jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Unit Tests
      run: echo "Running unit tests..." && exit 0
      if: github.event_name == 'pull_request'
    
    - name: Run Integration Tests
      run: echo "Running integration tests..." && exit 0
      if: github.event_name == 'pull_request'
    
    - name: Add test-passed label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && success()
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['test-passed']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  security:
    needs: testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Scan for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
    
    - name: Run Linter
      run: echo "Running linter checks..." && exit 0
    
    - name: Add sec-passed label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && success()
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['sec-passed']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  version-update:
    needs: security
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.set-version.outputs.new_version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Initialize version file
      run: |
        if [ ! -f "$VERSION_FILE" ]; then
          echo "0.0.0" > $VERSION_FILE
          git add $VERSION_FILE
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git commit -m "Initialize version file [0.0.0]"
          git push
        fi
        cp $VERSION_FILE $VERSION_FILE.old
    
    - name: Determine version bump type
      id: bump-type
      run: |
        if [[ $GITHUB_REF == refs/heads/feature* ]]; then
          echo "type=minor" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == refs/heads/hotfix* ]]; then
          echo "type=patch" >> $GITHUB_OUTPUT
        else
          echo "type=none" >> $GITHUB_OUTPUT
        fi
    
    - name: Bump version
      id: set-version
      if: steps.bump-type.outputs.type != 'none'
      run: |
        current_version=$(cat $VERSION_FILE)
        IFS='.' read -ra parts <<< "$current_version"
        
        if [ "${{ steps.bump-type.outputs.type }}" = "minor" ]; then
          new_version="${parts[0]}.$((${parts[1]} + 1)).0"
        else
          new_version="${parts[0]}.${parts[1]}.$((${parts[2]} + 1))"
        fi
        
        echo "$new_version" > $VERSION_FILE
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        echo "Version bumped from $current_version to $new_version"
    
    - name: Commit version update
      if: steps.bump-type.outputs.type != 'none'
      run: |
        old_version=$(cat $VERSION_FILE.old)
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add $VERSION_FILE
        git commit -m "[$(cat $VERSION_FILE)] <- [$old_version] ${{ steps.bump-type.outputs.type }} up"
        git push
    
    - name: Add version label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && steps.bump-type.outputs.type != 'none'
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['v${{ steps.set-version.outputs.new_version }}']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  changelog:
    needs: version-update
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      
      - name: Ensure changelog exists
        run: |
          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "# Changelog" > $CHANGELOG_FILE
            echo "" >> $CHANGELOG_FILE
            echo "## [Unreleased]" >> $CHANGELOG_FILE
            echo "- Initial version" >> $CHANGELOG_FILE
          fi
          cat $CHANGELOG_FILE
      
      
      - name: Update changelog
        run: |
          version=$(cat $VERSION_FILE)
          current_date=$(date +'%Y-%m-%d')
          branch_name=${GITHUB_REF#refs/heads/}
          
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          echo -e "## [$version] - $current_date\n- Merged branch: $branch_name\n\n$(cat $CHANGELOG_FILE)" > temp_changelog
          mv temp_changelog $CHANGELOG_FILE
          
          echo "Updated changelog:"
          cat $CHANGELOG_FILE
      
      
      - name: Commit and push changelog
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add $CHANGELOG_FILE
          git commit -m "Update changelog for version $(cat $VERSION_FILE)" || echo "No changes to commit"
          git push
      
      
      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.md  
          retention-days: 5
  


  docker-publish:
    needs: changelog
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: |
          ${{ env.DOCKER_HUB_REPOSITORY }}:v${{ needs.version-update.outputs.new_version }}
          ${{ env.DOCKER_HUB_REPOSITORY }}:latest
    
    - name: Update Docker Hub description
      run: |
        curl -X PATCH \
          -H "Authorization: Bearer ${{ secrets.DOCKER_HUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"full_description": "$(curl -s https://raw.githubusercontent.com/${{ github.repository }}/main/README.md | jq -sR)"}' \
          https://hub.docker.com/v2/repositories/${{ env.DOCKER_HUB_REPOSITORY }}/
    
    - name: Add dockerhub label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dockerhub']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  telegram-notify:
    needs: docker-publish
    runs-on: ubuntu-latest
    steps:
      - name: Prepare changelog
        run: |
          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "# Emergency Changelog" > $CHANGELOG_FILE
            echo "## Version $(cat $VERSION_FILE)" >> $CHANGELOG_FILE
            echo "- Created automatically" >> $CHANGELOG_FILE
          fi
      
      - name: Download changelog artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: changelog
          
      - name: Get current version
        id: version
        run: |
          if [ -f "$VERSION_FILE" ]; then
            echo "version=$(cat $VERSION_FILE)" >> $GITHUB_OUTPUT
          else
            echo "version=0.0.0" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            üöÄ New version *v${{ steps.version.outputs.version }}* deployed!
            üìÖ Date: $(date +'%Y-%m-%d')
            üê≥ Docker image: ${{ env.DOCKER_HUB_REPOSITORY }}:v${{ steps.version.outputs.version }}
            üîó View changes: https://github.com/${{ github.repository }}/blob/main/$CHANGELOG_FILE
          document: $CHANGELOG_FILE

  deploy-prod:
    needs: telegram-notify
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker
      uses: docker/setup-docker-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Deploy with docker compose
      run: |
        docker compose -f docker-compose.prod.yml down || true
        docker compose -f docker-compose.prod.yml pull
        docker compose -f docker-compose.prod.yml up -d
    
    - name: Verify deployment
      run: |
        docker ps
        curl -s http://localhost:80 || echo "Service check failed"
    
    - name: Add PROD label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['PROD']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  create-release:
    needs: deploy-prod
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.version-update.outputs.new_version }}
        name: Release v${{ needs.version-update.outputs.new_version }}
        body: |
          ### Changes in v${{ needs.version-update.outputs.new_version }}
          - Branch: ${{ github.ref }}
          - Commit: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          - [View Changelog](${{ github.server_url }}/${{ github.repository }}/blob/main/$CHANGELOG_FILE)
        files: $CHANGELOG_FILE
