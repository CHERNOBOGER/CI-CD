name: CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - feature/*
      - hotfix/*

env:
  DOCKER_HUB_REPOSITORY: chernoboger/ci-cd
  VERSION_FILE: version
  CHANGELOG_FILE: changelog.md
  DOCKER_HUB_USERNAME: chernoboger
  DOCKER_HUB_TOKEN: dckr_pat_MSKwU_aFtcHT98w5vPZgTlTHrmI

jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Unit Tests
      run: echo "Running unit tests..." && exit 0
      if: github.event_name == 'pull_request'
    
    - name: Run Integration Tests
      run: echo "Running integration tests..." && exit 0
      if: github.event_name == 'pull_request'
    
    - name: Add test-passed label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && success()
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['test-passed']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  security:
    needs: testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Scan for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
    
    - name: Run Linter
      run: echo "Running linter checks..." && exit 0
    
    - name: Add sec-passed label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && success()
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['sec-passed']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  version-update:
    needs: security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Get current version
      id: version
      run: |
        if [ -f "$VERSION_FILE" ]; then
          echo "current_version=$(cat $VERSION_FILE)" >> $GITHUB_OUTPUT
        else
          echo "current_version=0.0.0" >> $GITHUB_OUTPUT
        fi
    
    - name: Determine version bump type
      id: bump-type
      run: |
        if [[ $GITHUB_REF == refs/heads/feature* ]]; then
          echo "type=minor" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == refs/heads/hotfix* ]]; then
          echo "type=patch" >> $GITHUB_OUTPUT
        else
          echo "type=none" >> $GITHUB_OUTPUT
        fi
    
    - name: Bump version
      id: bump-version
      if: steps.bump-type.outputs.type != 'none'
      uses: mathieudutour/github-tag-action@v6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tag_prefix: v
        default_bump: ${{ steps.bump-type.outputs.type }}
    
    - name: Update version file
      if: steps.bump-version.outputs.new_tag
      run: |
        new_version=${GITHUB_REF#refs/tags/v}
        echo "$new_version" > $VERSION_FILE
        echo "Old version: ${{ steps.version.outputs.current_version }}"
        echo "New version: $new_version"
    
    - name: Commit version update
      if: steps.bump-version.outputs.new_tag
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add $VERSION_FILE
        old_version=${{ steps.version.outputs.current_version }}
        new_version=${GITHUB_REF#refs/tags/v}
        commit_msg="[$new_version] <- [$old_version] ${{ steps.bump-type.outputs.type }} up"
        git commit -m "$commit_msg"
        git push
    
    - name: Add version label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && steps.bump-version.outputs.new_tag
      with:
        script: |
          try {
            const newVersion = '${{ steps.bump-version.outputs.new_tag }}'.replace('v', '');
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [newVersion]
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  changelog:
    needs: version-update
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Update changelog
      if: steps.bump-version.outputs.new_tag
      run: |
        new_version=${GITHUB_REF#refs/tags/v}
        branch_name=${GITHUB_REF#refs/heads/}
        current_date=$(date +'%Y-%m-%d')
        
        echo -e "## Version $new_version ($current_date)\n- Merged branch: $branch_name\n\n$(cat $CHANGELOG_FILE)" > temp_changelog
        mv temp_changelog $CHANGELOG_FILE
        
        cat $CHANGELOG_FILE
    
    - name: Commit changelog
      if: steps.bump-version.outputs.new_tag
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add $CHANGELOG_FILE
        git commit -m "Update changelog for version ${GITHUB_REF#refs/tags/v}"
        git push
    
    - name: Add changelog label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && steps.bump-version.outputs.new_tag
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['changelog']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }
    
    - name: Upload changelog as artifact
      uses: actions/upload-artifact@v4
      with:
        name: changelog
        path: ${{ env.CHANGELOG_FILE }}

  docker-publish:
    needs: changelog
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: |
          ${{ env.DOCKER_HUB_REPOSITORY }}:v${{ needs.version-update.outputs.new_tag }}
          ${{ env.DOCKER_HUB_REPOSITORY }}:latest
        build-args: |
          VERSION=${{ needs.version-update.outputs.new_tag }}
    
    - name: Update Docker Hub description
      run: |
        curl -X PATCH \
          -H "Content-Type: application/json" \
          -H "Authorization: JWT ${{ secrets.DOCKER_HUB_TOKEN }}" \
          -d '{"full_description": "$(cat README.md | jq -Rs .)"}' \
          "https://hub.docker.com/v2/repositories/${{ env.DOCKER_HUB_REPOSITORY }}/"
    
    - name: Add dockerhub label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dockerhub']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  telegram-notify:
    needs: docker-publish
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: changelog
    
    - name: Send Telegram notification
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          üöÄ New version *v${{ needs.version-update.outputs.new_tag }}* deployed!
          üìù Changelog: https://github.com/${{ github.repository }}/blob/main/changelog.md
          üê≥ Docker image: https://hub.docker.com/r/${{ env.DOCKER_HUB_REPOSITORY }}/tags
          üîó PR: https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}
        file: ${{ env.CHANGELOG_FILE }}

  deploy-prod:
    needs: telegram-notify
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install Docker
      uses: docker/setup-docker-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Deploy with Docker Compose
      run: |
        docker-compose down
        docker-compose pull
        docker-compose up -d
    
    - name: Add PROD label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['PROD']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  create-release:
    needs: deploy-prod
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.version-update.outputs.new_tag }}
        name: Release v${{ needs.version-update.outputs.new_tag }}
        body: |
          This release includes changes from branch ${{ github.ref }}.
          See [changelog](changelog.md) for details.
        files: ${{ env.CHANGELOG_FILE }}
