name: CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - feature/*
      - hotfix/*

env:
  DOCKER_HUB_REPOSITORY: chernoboger/ci-cd
  VERSION_FILE: version
  CHANGELOG_FILE: changelog.md

jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Unit Tests
      run: echo "Running unit tests..." && exit 0
      if: github.event_name == 'pull_request'
    
    - name: Run Integration Tests
      run: echo "Running integration tests..." && exit 0
      if: github.event_name == 'pull_request'
    
    - name: Add test-passed label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && success()
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['test-passed']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  security:
    needs: testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Scan for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
    
    - name: Run Linter
      run: echo "Running linter checks..." && exit 0
    
    - name: Add sec-passed label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && success()
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['sec-passed']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }

  version-update:
    needs: security
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.set-version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Initialize version file
        id: init-version
        run: |
          if [ ! -f "version" ]; then
            echo "0.0.0" > version
            git add version
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'actions@github.com'
            git commit -m "Initialize version file [0.0.0]"
            # Используем токен для аутентификации
            git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git push origin HEAD:${{ github.ref }}
            echo "Initialized version file with 0.0.0"
          else
            echo "Version file exists"
          fi
  
      - name: Determine version bump
        id: bump-type
        run: |
          if [[ $GITHUB_REF == refs/heads/feature* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/hotfix* ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=none" >> $GITHUB_OUTPUT
          fi
  
      - name: Update version
        id: set-version
        if: steps.bump-type.outputs.type != 'none'
        run: |
          current_version=$(cat version)
          IFS='.' read -ra parts <<< "$current_version"
          
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}
  
          if [ "${{ steps.bump-type.outputs.type }}" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi
  
          new_version="$major.$minor.$patch"
          echo "$new_version" > version
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "Old version: $current_version"
          echo "New version: $new_version"
  
      - name: Commit version update
        if: steps.bump-type.outputs.type != 'none'
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add version
          git commit -m "[$(cat version)] version update"
          git push
          
  changelog:
    needs: version-update
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize changelog
        run: |
          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "# Changelog" > $CHANGELOG_FILE
            echo "" >> $CHANGELOG_FILE
            echo "## [Unreleased]" >> $CHANGELOG_FILE
            echo "- Initial version" >> $CHANGELOG_FILE
          fi
      
      - name: Update changelog
        if: needs.version-update.outputs.new_version
        run: |
          version=${GITHUB_REF#refs/tags/v}
          if [ -z "$version" ]; then
            version=$(cat $VERSION_FILE)
          fi
          
          current_date=$(date +'%Y-%m-%d')
          branch_name=${GITHUB_REF#refs/heads/}
          
          # Вставляем новую версию в начало файла
          echo -e "## [$version] - $current_date\n- Merged branch: $branch_name\n\n$(cat $CHANGELOG_FILE)" > temp_changelog
          mv temp_changelog $CHANGELOG_FILE
          
          # Показываем содержимое для отладки
          cat $CHANGELOG_FILE
      
      - name: Commit changelog
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add $CHANGELOG_FILE
          git commit -m "Update changelog for version $(cat $VERSION_FILE)"
          git push
      
      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: $CHANGELOG_FILE

  docker-publish:
   needs: changelog
   runs-on: ubuntu-latest
   steps:
    - uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: |
          ${{ env.DOCKER_HUB_REPOSITORY }}:v${{ needs.version-update.outputs.new_tag }}
          ${{ env.DOCKER_HUB_REPOSITORY }}:latest
    
    - name: Add dockerhub label
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          try {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dockerhub']
            })
          } catch (error) {
            console.error('Error adding label:', error)
          }
          
  telegram-notify:
    needs: docker-publish
    runs-on: ubuntu-latest
    steps:
      - name: Check version file
        run: |
          if [ ! -f "version" ]; then
            echo "0.0.0" > version
          fi
          echo "Current version: $(cat version)"
          
      - name: Send notification
        uses: appleboy/telegram-action@master
        with:
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            🚀 New version v$(cat version) deployed!
            📅 Date: $(date +'%Y-%m-%d')
            🔗 View changes: https://github.com/${{ github.repository }}/tree/${{ github.ref }}
  deploy-prod:
    needs: telegram-notify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get-version
        run: |
          echo "version=$(cat $VERSION_FILE)" >> $GITHUB_OUTPUT
      
      - name: Set up Docker
        uses: docker/setup-docker-action@v3
        
      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Deploy application
        run: |
          echo "Using image: ${{ env.DOCKER_HUB_REPOSITORY }}:v${{ steps.get-version.outputs.version }}"
          docker-compose -f docker-compose.prod.yml down || true
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          
      - name: Verify deployment
        run: |
          docker ps
          curl -s http://localhost:80 || echo "Service check failed"
        
  create-release:
    needs: deploy-prod
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get-version
        run: |
          echo "version=$(cat $VERSION_FILE)" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: Release v${{ steps.get-version.outputs.version }}
          body: |
            ### Changes
            - Version: ${{ steps.get-version.outputs.version }}
            - Branch: ${{ github.ref }}
            - Commit: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          files: ${{ env.CHANGELOG_FILE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
